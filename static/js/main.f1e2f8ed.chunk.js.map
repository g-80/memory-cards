{"version":3,"sources":["components/Scoreboard.js","components/Card.js","App.js","index.js"],"names":["Scoreboard","props","className","currentScore","bestScore","Card","onClick","textColour","text","shape","App","cardsColours","cardsShapes","useState","score","setScore","setBestScore","selectedCards","setSelectedCards","card1","card2","card3","options","setOptions","createCardsContents","container","isArrayInContainer","arr","containerString","JSON","stringify","arrayString","includes","i","colourIndex","Math","floor","random","length","textIndex","shapeIndex","selectionArray","push","useEffect","handleClick","key","clickedCard","card","selectedCardsString","cardString","isCardPreviouslySelected","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAWeA,MATf,SAAoBC,GAClB,OACE,sBAAKC,UAAU,uBAAf,UACE,sBAAKA,UAAU,gBAAf,mBAAsCD,EAAME,gBAC5C,sBAAKD,UAAU,aAAf,wBAAwCD,EAAMG,iBCKrCC,MATf,SAAcJ,GACZ,OACE,sBAAKC,UAAU,OAAOI,QAASL,EAAMK,QAArC,UACE,oBAAIJ,UAAS,oBAAeD,EAAMM,YAAlC,SAAiDN,EAAMO,OACvD,qBAAKN,UAAS,UAAKD,EAAMQ,a,MCuGhBC,MAxGf,WACE,IAAMC,EAAe,CAAC,MAAO,QAAS,OAAQ,SAAU,UAClDC,EAAc,CAAC,SAAU,SAAU,YAAa,YAFzC,EAGaC,mBAAS,GAHtB,mBAGNC,EAHM,KAGCC,EAHD,OAIqBF,mBAAS,GAJ9B,mBAINT,EAJM,KAIKY,EAJL,OAK6BH,mBAAS,IALtC,mBAKNI,EALM,KAKSC,EALT,OAMiBL,mBAAS,CAAEM,MAAO,GAAIC,MAAO,GAAIC,MAAO,KANzD,mBAMNC,EANM,KAMGC,EANH,KAQPC,EAAsB,WAa1B,IAZA,IAAMC,EAAY,GAEZC,EAAqB,SAACC,GAC1B,IAAMC,EAAkBC,KAAKC,UAAUL,GACjCM,EAAcF,KAAKC,UAAUH,GACnC,QAAIC,EAAgBI,SAASD,IAOtBE,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE1B,IAAMC,EAAcC,KAAKC,MAAMD,KAAKE,SAAW1B,EAAa2B,QACtDC,EAAYJ,KAAKC,MAAMD,KAAKE,SAAW1B,EAAa2B,QACpDE,EAAaL,KAAKC,MAAMD,KAAKE,SAAWzB,EAAY0B,QAIpDG,EAAiB,CAHC9B,EAAauB,GACfvB,EAAa4B,GACZ3B,EAAY4B,IAG/Bd,EAAmBe,GACrBR,IAEAR,EAAUiB,KAAKD,GAGnBlB,EAAW,CACTJ,MAAOM,EAAU,GACjBL,MAAOK,EAAU,GACjBJ,MAAOI,EAAU,MAKrBkB,qBAAU,WACRnB,MACC,IAEH,IAMMoB,EAAc,SAACC,GACnB,IAAMC,EAAcxB,EAAQuB,IAPG,SAACE,GAChC,IAAMC,EAAsBnB,KAAKC,UAAUb,GACrCgC,EAAapB,KAAKC,UAAUiB,GAClC,OAAOC,EAAoBhB,SAASiB,GAKhCC,CAAyBJ,IAM3B/B,EAASD,EAAQ,GAGjBI,EAAiB,GAAD,mBAAKD,GAAL,CAAoB6B,OARhC1C,EAAYU,GACdE,EAAaF,GAEfC,EAAS,IAOXS,KAGF,OACE,sBAAKtB,UAAU,MAAf,UACE,cAAC,EAAD,CAAYC,aAAcW,EAAOV,UAAWA,IAC5C,sBAAKF,UAAU,kBAAf,UACE,cAAC,EAAD,CACEI,QAAS,WACPsC,EAAY,UAEdrC,WAAYe,EAAQH,MAAM,GAC1BX,KAAMc,EAAQH,MAAM,GACpBV,MAAOa,EAAQH,MAAM,KAEvB,cAAC,EAAD,CACEb,QAAS,WACPsC,EAAY,UAEdrC,WAAYe,EAAQF,MAAM,GAC1BZ,KAAMc,EAAQF,MAAM,GACpBX,MAAOa,EAAQF,MAAM,KAEvB,cAAC,EAAD,CACEd,QAAS,WACPsC,EAAY,UAEdrC,WAAYe,EAAQD,MAAM,GAC1Bb,KAAMc,EAAQD,MAAM,GACpBZ,MAAOa,EAAQD,MAAM,YClG/B8B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f1e2f8ed.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Scoreboard(props) {\r\n  return (\r\n    <div className=\"scoreboard-container\">\r\n      <div className=\"current-score\">Score {props.currentScore}</div>\r\n      <div className=\"best-score\">Best score {props.bestScore}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scoreboard;\r\n","import React from \"react\";\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <div className=\"card\" onClick={props.onClick}>\r\n      <h1 className={`card-text ${props.textColour}`}>{props.text}</h1>\r\n      <div className={`${props.shape}`}></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React, { useState, useEffect } from \"react\";\nimport Scoreboard from \"./components/Scoreboard\";\nimport Card from \"./components/Card\";\nimport \"./App.css\";\n\nfunction App() {\n  const cardsColours = [\"red\", \"green\", \"blue\", \"yellow\", \"purple\"];\n  const cardsShapes = [\"square\", \"circle\", \"rectangle\", \"triangle\"];\n  const [score, setScore] = useState(0);\n  const [bestScore, setBestScore] = useState(0);\n  const [selectedCards, setSelectedCards] = useState([]);\n  const [options, setOptions] = useState({ card1: [], card2: [], card3: [] });\n\n  const createCardsContents = () => {\n    const container = [];\n    // checks if array is already in container\n    const isArrayInContainer = (arr) => {\n      const containerString = JSON.stringify(container);\n      const arrayString = JSON.stringify(arr);\n      if (containerString.includes(arrayString)) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    for (let i = 0; i < 3; i++) {\n      // get a random number to use as index for accessing arrays\n      const colourIndex = Math.floor(Math.random() * cardsColours.length);\n      const textIndex = Math.floor(Math.random() * cardsColours.length);\n      const shapeIndex = Math.floor(Math.random() * cardsShapes.length);\n      const colourSelection = cardsColours[colourIndex];\n      const textSelection = cardsColours[textIndex];\n      const shapeSelection = cardsShapes[shapeIndex];\n      const selectionArray = [colourSelection, textSelection, shapeSelection];\n      // Selection array should not be identical to a one before\n      if (isArrayInContainer(selectionArray)) {\n        i--;\n      } else {\n        container.push(selectionArray);\n      }\n    }\n    setOptions({\n      card1: container[0],\n      card2: container[1],\n      card3: container[2],\n    });\n  };\n\n  // cards will load automatically when mounted\n  useEffect(() => {\n    createCardsContents();\n  }, []);\n\n  const isCardPreviouslySelected = (card) => {\n    const selectedCardsString = JSON.stringify(selectedCards);\n    const cardString = JSON.stringify(card);\n    return selectedCardsString.includes(cardString);\n  };\n\n  const handleClick = (key) => {\n    const clickedCard = options[key];\n    if (isCardPreviouslySelected(clickedCard)) {\n      if (bestScore < score) {\n        setBestScore(score);\n      }\n      setScore(0);\n    } else {\n      setScore(score + 1);\n      // get previous selected cards arrays and make new array using\n      // them and newly selected card\n      setSelectedCards([...selectedCards, clickedCard]);\n    }\n    createCardsContents();\n  };\n\n  return (\n    <div className=\"App\">\n      <Scoreboard currentScore={score} bestScore={bestScore} />\n      <div className=\"cards-container\">\n        <Card\n          onClick={() => {\n            handleClick(\"card1\");\n          }}\n          textColour={options.card1[0]}\n          text={options.card1[1]}\n          shape={options.card1[2]}\n        />\n        <Card\n          onClick={() => {\n            handleClick(\"card2\");\n          }}\n          textColour={options.card2[0]}\n          text={options.card2[1]}\n          shape={options.card2[2]}\n        />\n        <Card\n          onClick={() => {\n            handleClick(\"card3\");\n          }}\n          textColour={options.card3[0]}\n          text={options.card3[1]}\n          shape={options.card3[2]}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}